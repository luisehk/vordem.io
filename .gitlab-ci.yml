image: python:3.6

services:
  - postgres:9.6
  - redis:3.2

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"
  POSTGRES_DB: sealedair

cache:
  paths:
    - .cache/
    - venv/

before_script:
  - echo "deb http://toolbelt.heroku.com/ubuntu ./" > /etc/apt/sources.list.d/heroku.list
  - wget -O- https://toolbelt.heroku.com/apt/release.key | apt-key add -
  - apt-get update
  - apt-get install -y heroku-toolbelt
  - apt-get install -y ruby-dev
  - gem install dpl
  - python --version
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install -r docker/python/requirements.txt

stages:
  - pep8
  - radon
  - bandit
  - coverage
  - test
  - deploy_dev
  - deploy_staging
  - deploy_production

pep8:
  stage: pep8
  script:
    - flake8 --exclude='.git,venv,*migrations*,webapps/canvas,static/lib' .

radon:
  stage: radon
  script:
    - radon cc -s -a --ignore='venv' .
    - radon mi -s --ignore='venv' .

bandit:
  stage: bandit
  script:
    - bandit -r --exclude='venv' .

coverage: &app
  stage: coverage
  variables:
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
  script:
    - python manage.py migrate
    - coverage run --source='.' --omit='venv/*' manage.py test
    - coverage report -m --fail-under=60

test:
  <<: *app
  stage: test
  script:
    - python manage.py test

deploy_dev: &deploy
  stage: deploy_dev
  variables:
    HEROKU_APP: "sealedair-dev"
  script:
    - dpl --provider=heroku --app=$HEROKU_APP --api-key=$HEROKU_API_KEY
    - heroku run --exit-code --app $HEROKU_APP python manage.py migrate
  only:
    - master

deploy_staging:
  <<: *deploy
  stage: deploy_staging
  variables:
    HEROKU_APP: "sealedair-staging"
  only:
    - staging

deploy_production:
  <<: *deploy
  stage: deploy_production
  variables:
    HEROKU_APP: "sealedair-production"
  only:
    - production
